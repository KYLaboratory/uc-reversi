
Test02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000084  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000084  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000173  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000117  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000149  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d5  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000072d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	15 d0       	rcall	.+42     	; 0x6c <main>
  42:	1e c0       	rjmp	.+60     	; 0x80 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <_Z10recieveMesv>:
	Buff = 0;
	
	//12bitでデータが送られてくる
	
	//AD変換
	ADCSRA |= _BV(ADSC);				//AD変換を開始
  46:	ea e7       	ldi	r30, 0x7A	; 122
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	80 81       	ld	r24, Z
  4c:	80 64       	ori	r24, 0x40	; 64
  4e:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA,ADIF);	//AD変換終了待ち
  50:	80 81       	ld	r24, Z
  52:	84 ff       	sbrs	r24, 4
  54:	fd cf       	rjmp	.-6      	; 0x50 <_Z10recieveMesv+0xa>
	Illumination = ADC;					//観測輝度値に格納
  56:	80 91 78 00 	lds	r24, 0x0078
  5a:	90 91 79 00 	lds	r25, 0x0079
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	83 ec       	ldi	r24, 0xC3	; 195
  60:	99 e0       	ldi	r25, 0x09	; 9
  62:	01 97       	sbiw	r24, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <_Z10recieveMesv+0x1c>
  66:	00 c0       	rjmp	.+0      	; 0x68 <_Z10recieveMesv+0x22>
  68:	00 00       	nop
  6a:	08 95       	ret

0000006c <main>:
}
int main(void)
{
	
	
	ADCSRA = 0b10000100;	//AD変換を有効にする
  6c:	84 e8       	ldi	r24, 0x84	; 132
  6e:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = 0b00000000;			//AD変換の対象ピンをPC0（ADC0)とする
  72:	10 92 7c 00 	sts	0x007C, r1
	
	DDRD = 0b00000100;		//PD2を出力に設定（※LEDデバッグ）
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;		//PD2のLEDを消灯（※LEDデバッグ）
  7a:	1b b8       	out	0x0b, r1	; 11
	
    while(1)
    {
		recieveMes();
  7c:	e4 df       	rcall	.-56     	; 0x46 <_Z10recieveMesv>
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
